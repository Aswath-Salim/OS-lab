#include <stdio.h>

// Structure to represent a process
typedef struct {
    int id;
    int burst_time;
    int arrival_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int completed;
} Process;

void srtf(Process processes[], int n) {
    int current_time = 0;
    int completed_processes = 0;

    while (completed_processes < n) {
        int shortest_index = -1;
        int shortest_burst = 999999; // A large number to start with

        for (int i = 0; i < n; ++i) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].remaining_time < shortest_burst) {
                    shortest_burst = processes[i].remaining_time;
                    shortest_index = i;
                }
            }
        }

        if (shortest_index == -1) {
            printf("No process available at time %d\n", current_time);
            current_time++;
        } else {
            processes[shortest_index].remaining_time--;
            if (processes[shortest_index].remaining_time == 0) {
                processes[shortest_index].turnaround_time = current_time + 1 - processes[shortest_index].arrival_time;
                processes[shortest_index].completed = 1;
                completed_processes++;
            }
            for (int i = 0; i < n; ++i) {
                if (i != shortest_index && processes[i].arrival_time <= current_time && processes[i].remaining_time > 0)
                    processes[i].waiting_time++;
            }
            current_time++;
        }
    }
}

void display_table(Process processes[], int n) {
    printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].arrival_time,
               processes[i].waiting_time, processes[i].turnaround_time);
    }
}

void priority(Process processes[], int n) {
    int current_time = 0;
    int completed_processes = 0;

    while (completed_processes < n) {
        int highest_priority_index = -1;
        int highest_priority = -1; // A large number to start with

        for (int i = 0; i < n; ++i) {
            if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
                if (processes[i].priority > highest_priority) {
                    highest_priority = processes[i].priority;
                    highest_priority_index = i;
                }
            }
        }

        if (highest_priority_index == -1) {
            printf("No process available at time %d\n", current_time);
            current_time++;
        } else {
            processes[highest_priority_index].remaining_time--;
            if (processes[highest_priority_index].remaining_time == 0) {
                processes[highest_priority_index].turnaround_time = current_time + 1 - processes[highest_priority_index].arrival_time;
                processes[highest_priority_index].completed = 1;
                completed_processes++;
            }
            for (int i = 0; i < n; ++i) {
                if (i != highest_priority_index && processes[i].arrival_time <= current_time && processes[i].remaining_time > 0)
                    processes[i].waiting_time++;
            }
            current_time++;
        }
    }
}

void display_table1(Process processes[], int n) {
    printf("Process\tBurst Time\tArrival Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].arrival_time,
               processes[i].priority, processes[i].waiting_time, processes[i].turnaround_time);
    }
}
void roundrobin( Process processes[], int n, int quantum) {
    int remaining_burst[n]; 
    int waiting_time[n]; 
    int turnaround_time[n]; 
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        remaining_burst[i] = processes[i].burst_time;
    }

    int current_time = 0; 
    int completed = 0; 

    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (remaining_burst[i] > 0) {
                if (remaining_burst[i] > quantum) {
                    current_time += quantum;
                    remaining_burst[i] -= quantum;
                } else {
                    current_time += remaining_burst[i];
                    waiting_time[i] = current_time - processes[i].burst_time - processes[i].arrival_time;
                    turnaround_time[i] = current_time - processes[i].arrival_time;
                    total_waiting_time += waiting_time[i];
                    total_turnaround_time += turnaround_time[i];
                    remaining_burst[i] = 0;
                    completed++;
                }
            }
        }
    }

    printf("Process ID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time, processes[i].burst_time, waiting_time[i], turnaround_time[i]);
    }
    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n,x;
        float total_waiting_time = 0, total_turnaround_time = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    Process processes[n];
    printf("ENTER \n 1.SRTF \n 2.PRIORITY PREEMPTIVE \n 3.ROUND ROBIN \n");
    scanf("%d",&x);
    switch(x){
    case 1:
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Enter the arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].completed = 0;
        processes[i].waiting_time = 0;
    }
     srtf(processes, n);

    for (int i = 0; i < n; ++i) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);

    display_table(processes, n);

    break;
  case 2:
    for (int i = 0; i < n; ++i) {
        processes[i].id = i + 1;
        printf("Enter the arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].arrival_time, &processes[i].burst_time, &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].completed = 0;
        processes[i].waiting_time = 0;
    }

    priority(processes, n);

    for (int i = 0; i < n; ++i) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    printf("\nAverage Waiting Time: %.2f\n", total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time / n);

    // Display process table
    display_table1(processes, n);
    break;
    case 3:
    int quantum;
     printf("Enter the time quantum: ");
    scanf("%d", &quantum);
     printf("Enter process details (PID, arrival Time, burst Time):\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d %d %d", &processes[i].id, &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    roundrobin(processes, n, quantum);
    break;
}
    return 0;
}
