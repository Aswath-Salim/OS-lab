#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_REQUESTS 100

void fcfs(int requests[], int head, int n);
void sstf(int requests[], int head, int n);
void scan(int requests[], int head, int n);
void cscan(int requests[], int head, int n);
void look(int requests[], int head, int n);

int main() {
    int requests[MAX_REQUESTS], head, n, i;

 
    printf("Enter the number of requests: ");
    scanf("%d", &n);
    printf("Enter the requests: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &requests[i]);
    }
    printf("Enter the initial position of the head: ");
    scanf("%d", &head);

    int choice;
    while (1) {
        printf("\nDisk Scheduling Algorithms:\n");
        printf("1. FCFS (First-Come, First-Served)\n");
        printf("2. SSTF (Shortest Seek Time First)\n");
        printf("3. SCAN\n");
        printf("4. C-SCAN (Circular SCAN)\n");
        printf("5. LOOK\n");
        printf("6. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                fcfs(requests, head, n);
                break;
            case 2:
                sstf(requests, head, n);
                break;
            case 3:
                scan(requests, head, n);
                break;
            case 4:
                cscan(requests, head, n);
                break;
            case 5:
                look(requests, head, n);
                break;
            case 6:
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}


void fcfs(int requests[], int head, int n) {
    int total_seek_time = 0;

    printf("FCFS (First-Come, First-Served) Disk Scheduling\n");
    printf("Sequence of head movement: ");
    for (int i = 0; i < n; i++) {
        total_seek_time += abs(head - requests[i]);
        printf("%d ", requests[i]);
        head = requests[i];
    }
    printf("\nTotal seek time: %d\n", total_seek_time);
}


void sstf(int requests[], int head, int n) {
    int total_seek_time = 0;
    int visited[MAX_REQUESTS] = {0};

    printf("SSTF (Shortest Seek Time First) Disk Scheduling\n");
    printf("Sequence of head movement: ");
    for (int i = 0; i < n; i++) {
        int min_distance = INT_MAX;
        int min_index = -1;
        for (int j = 0; j < n; j++) {
            if (!visited[j]) {
                int distance = abs(head - requests[j]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = j;
                }
            }
        }
        total_seek_time += min_distance;
        visited[min_index] = 1;
        printf("%d ", requests[min_index]);
        head = requests[min_index];
    }
    printf("\nTotal seek time: %d\n", total_seek_time);
}


void scan(int requests[], int head, int n) {
    int total_seek_time = 0;

    printf("SCAN Disk Scheduling\n");
    printf("Sequence of head movement: ");
    int direction = 1; 
    int current_track = head;
    while (1) {
        int min_distance = INT_MAX;
        int min_index = -1;
        for (int i = 0; i < n; i++) {
            if (direction == 1 && requests[i] >= current_track) {
                int distance = abs(current_track - requests[i]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = i;
                }
            } else if (direction == -1 && requests[i] <= current_track) {
                int distance = abs(current_track - requests[i]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = i;
                }
            }
        }
        if (min_index == -1) {
            if (direction == 1) {
                direction = -1;
                printf("0 ");
                total_seek_time += current_track;
                current_track = 0;
            } else {
                break;
            }
        } else {
            total_seek_time += min_distance;
            printf("%d ", requests[min_index]);
            current_track = requests[min_index];
            requests[min_index] = -1; // Mark as visited
        }
    }
    printf("\nTotal seek time: %d\n", total_seek_time);
}

void cscan(int requests[], int head, int n) {
    int total_seek_time = 0;

    printf("C-SCAN (Circular SCAN) Disk Scheduling\n");
    printf("Sequence of head movement: ");
    int current_track = head;
    while (1) {
        int min_distance = INT_MAX;
        int min_index = -1;
        for (int i = 0; i < n; i++) {
            if (requests[i] != -1) {
                int distance = abs(current_track - requests[i]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = i;
                }
            }
        }
        if (min_index == -1) {
            printf("0 ");
            total_seek_time += current_track;
            current_track = 0;
            for (int i = 0; i < n; i++) {
                if (requests[i] >= current_track) {
                    min_index = i;
                    break;
                }
            }
        } else {
            total_seek_time += min_distance;
            printf("%d ", requests[min_index]);
            current_track = requests[min_index];
            requests[min_index] = -1; 
        }
        if (current_track == 0)
            break;
    }
    printf("\nTotal seek time: %d\n", total_seek_time);
}


void look(int requests[], int head, int n) {
    int total_seek_time = 0;

    printf("LOOK Disk Scheduling\n");
    printf("Sequence of head movement: ");
    int direction = 1; 
    int current_track = head;
    while (1) {
        int min_distance = INT_MAX;
        int min_index = -1;
        for (int i = 0; i < n; i++) {
            if (direction == 1 && requests[i] >= current_track) {
                int distance = abs(current_track - requests[i]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = i;
                }
            } else if (direction == -1 && requests[i] <= current_track) {
                int distance = abs(current_track - requests[i]);
                if (distance < min_distance) {
                    min_distance = distance;
                    min_index = i;
                }
            }
        }
        if (min_index == -1) {
            if (direction == 1) {
                direction = -1;
            } else {
                break;
            }
        } else {
            total_seek_time += min_distance;
            printf("%d ", requests[min_index]);
            current_track = requests[min_index];
            requests[min_index] = -1; 
        }
    }
    printf("\nTotal seek time: %d\n", total_seek_time);
}
