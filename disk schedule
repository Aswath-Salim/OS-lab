#include <stdlib.h>
#include <stdio.h>

#define HIGH 199
#define LOW 0

int main(){
  int queue[20],sum,x, q_size, head,dloc, i,j, seek=0, diff, max, temp,q[20], queue1[20], queue2[20], temp1=0, temp2=0;
  float avg;

  printf("%s\t", "Input no of disk locations");
  scanf("%d", &q_size);

  printf("%s\t", "Enter initial head position");
  scanf("%d", &head);

 printf("********MENU********\n");
  printf("ENTER\n");

 printf("1.FCFS\n");
  printf("2.SCAN\n");
 printf("3.CSCAN\n");
printf("**********************\n");
scanf("%d",&x);
switch(x)
{
case 1:

printf("%s\n", "Enter queue elements");
  for(int i=1; i<=q_size; i++){
    scanf("%d",&queue[i]);
  }



  queue[0]=head;
  for(j=0; j<=q_size-1; j++){
    diff = abs(queue[j]-queue[j+1]);
    seek += diff;
    printf("%d-->",queue[j]);
   
  }
  printf("%d",queue[j]);
  printf("\nTotal seek time is %d\t",seek);
 break;
case 2: 
  printf("%s\n", "Input elements into disk queue");
  for(int i=0; i<q_size; i++){
    scanf("%d", &queue[i]);
  }

  queue[q_size] = head; 
  q_size++;

  for(int i=0; i<q_size;i++){
    for(int j=i; j<q_size; j++){
      if(queue[i]>queue[j]){
        temp = queue[i];
        queue[i] = queue[j];
        queue[j] = temp;
      }
    }
  }

  max = queue[q_size-1];
  for(int i=0; i<q_size; i++){
    if(head == queue[i]){
      dloc = i;
      break;
    }
  }

  if(abs(head-LOW) <= abs(head-HIGH)){

      for(int j=dloc; j>=0; j--){
        printf("%d --> ",queue[j]);
      }
      for(int j=dloc+1; j<q_size; j++){
        printf("%d --> ",queue[j]);
      }

      } else {

      for(int j=dloc+1; j<q_size; j++){
          printf("%d --> ",queue[j]);
      }
      for(int j=dloc; j>=0; j--){
          printf("%d --> ",queue[j]);
      }

  }
  sum = head + max;
  printf("\nmovement of total cylinders %d", sum);
break;
case 3:
  printf("%s\n","Enter disk positions to be read");
  for(i=0; i<q_size; i++) {

    scanf("%d", &temp);
      if(temp >= head){
          queue1[temp1] = temp;
          temp1++;
      } else {
          queue2[temp2] = temp;
          temp2++;
      }
  }

  for(i=0; i<temp1-1; i++){
    for(j=i+1; j<temp1; j++){
        if(queue1[i] > queue1[j]){
          temp = queue1[i];
          queue1[i] = queue1[j];
          queue1[j] = temp;
      }
    }
  }

  for(i=0; i<temp2-1; i++){
    for(j=i+1; j<temp2; j++){
      if(queue2[i]>queue2[j]){
          temp = queue2[i];
          queue2[i] = queue2[j];
          queue2[j] = temp;
      }
    }
  }

  if(abs(head-LOW) >= abs(head-HIGH)){

      for(i=1,j=0; j<temp1; i++,j++){
          queue[i] = queue1[j];
      }

          queue[i] = HIGH;
          queue[i+1] = 0;

      for(i=temp1+3, j=0; j<temp2; i++, j++){
          queue[i] = queue2[j];
      }

  } else {

      for(i=1,j=temp2-1; j>=0; i++,j--){
          queue[i] = queue2[j];
      }

          queue[i] = LOW;
          queue[i+1] = HIGH;

      for(i=temp2+3, j=temp1-1; j>=0; i++, j--){
          queue[i] = queue1[j];
      }
}


  int c,d;
  for (c = q_size+2, d = 1; c >= 0; c--, d++)
        q[d] = queue[c];

  q[0] = head;

  for(j=0; j<=q_size+1; j++){
      diff=abs(q[j+1] - q[j]);
        seek += diff;
    printf("%d-->",q[j]);

  }
  printf("%d",q[j]);
  printf("\nTotal seek time is %d\n", seek);
  break;
}
  return 0;
}
