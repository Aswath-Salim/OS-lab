
#include <stdio.h>

#define MAX_BLOCKS 10

void firstFit(int blockSize[], int m, int processSize[], int n);
void bestFit(int blockSize[], int m, int processSize[], int n);
void worstFit(int blockSize[], int m, int processSize[], int n);

int main() {
    int originalBlockSize[MAX_BLOCKS], blockSize[MAX_BLOCKS], processSize[MAX_BLOCKS];
    int m, n, choice;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &originalBlockSize[i]);
        blockSize[i] = originalBlockSize[i];
    }

    printf("\nEnter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

    do {
        printf("\nMemory Allocation Algorithms:\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                firstFit(blockSize, m, processSize, n);
                break;
            case 2:
                bestFit(blockSize, m, processSize, n);
                break;
            case 3:
                worstFit(blockSize, m, processSize, n);
                break;
            case 4:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid option.\n");
        }
        
        // Reset blockSize to its original state after each allocation
        for (int i = 0; i < m; i++) {
            blockSize[i] = originalBlockSize[i];
        }
    } while (choice != 4);

    return 0;
}

void firstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX_BLOCKS];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;

        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                allocation[i] = j;
                blockSize[j] -= processSize[i];
                break;
            }
        }

        if (allocation[i] != -1) {
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        } else {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }
}

void bestFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX_BLOCKS];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
        
        int bestFitIdx = -1;

        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestFitIdx == -1 || blockSize[j] < blockSize[bestFitIdx]) {
                    bestFitIdx = j;
                }
            }
        }

        if (bestFitIdx != -1) {
            allocation[i] = bestFitIdx;
            blockSize[bestFitIdx] -= processSize[i];
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        } else {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }
}

void worstFit(int blockSize[], int m, int processSize[], int n) {
    int allocation[MAX_BLOCKS];

    for (int i = 0; i < n; i++) {
        allocation[i] = -1;

        int worstFitIdx = -1;

        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstFitIdx == -1 || blockSize[j] > blockSize[worstFitIdx]) {
                    worstFitIdx = j;
                }
            }
        }

        if (worstFitIdx != -1) {
            allocation[i] = worstFitIdx;
            blockSize[worstFitIdx] -= processSize[i];
            printf("Process %d allocated to Block %d\n", i + 1, allocation[i] + 1);
        } else {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }
}
