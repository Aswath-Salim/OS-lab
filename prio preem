#include <stdio.h>

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int priority;
    int completionTime;
    int turnaroundTime;
    int waitingTime;
    int remainingTime;
};

int findHighestPriority(struct Process processes[], int n, int currentTime) {
    int highestPriority = -1;
    int selectedProcess = -1;

    for (int i = 0; i < n; ++i) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0 && processes[i].priority > highestPriority) {
            highestPriority = processes[i].priority;
            selectedProcess = i;
        }
    }

    return selectedProcess;
}

void calculateTimes(struct Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;

    while (completed != n) {
        int selectedProcess = findHighestPriority(processes, n, currentTime);

        if (selectedProcess == -1) {
            currentTime++;
        } else {
            processes[selectedProcess].remainingTime--;

            if (processes[selectedProcess].remainingTime == 0) {
                completed++;
                processes[selectedProcess].completionTime = currentTime + 1;
                processes[selectedProcess].turnaroundTime = processes[selectedProcess].completionTime - processes[selectedProcess].arrivalTime;
                processes[selectedProcess].waitingTime = processes[selectedProcess].turnaroundTime - processes[selectedProcess].burstTime;
            }

            currentTime++;
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time, burst time, and priority for each process:\n");
    for (int i = 0; i < n; ++i) {
        printf("Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrivalTime);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burstTime);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].processID = i + 1;
        processes[i].remainingTime = processes[i].burstTime;
    }

    calculateTimes(processes, n);

    printf("\nProcess Execution Order:\n");
    printf("Process ID\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t\t%d\n", processes[i].processID, processes[i].arrivalTime,
               processes[i].burstTime, processes[i].priority, processes[i].completionTime, processes[i].turnaroundTime,
               processes[i].waitingTime);
    }

    return 0;
}
