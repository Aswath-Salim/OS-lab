#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int available[MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int work[MAX_RESOURCES];
int finish[MAX_PROCESSES];

void initialize() {
    // Initialize finish array
    for (int i = 0; i < MAX_PROCESSES; i++) {
        finish[i] = 0;
    }
}

int is_safe() {
    // Initialize work array
    for (int i = 0; i < MAX_RESOURCES; i++) {
        work[i] = available[i];
    }

    // Find an index i such that both finish[i] is 0 and need[i] <= work
    int count = 0;
    while (count < MAX_PROCESSES) {
        int found = 0;
        for (int i = 0; i < MAX_PROCESSES; i++) {
            if (!finish[i]) {
                int can_execute = 1;
                for (int j = 0; j < MAX_RESOURCES; j++) {
                    if (need[i][j] > work[j]) {
                        can_execute = 0;
                        break;
                    }
                }
                if (can_execute) {
                    // Grant resources to process i
                    for (int j = 0; j < MAX_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }
        // If no process can be executed, the system is in an unsafe state
        if (!found) {
            return 0;
        }
    }
    return 1;
}

int request_resources(int pid, int request[]) {
    // Check if request is within need
    for (int i = 0; i < MAX_RESOURCES; i++) {
        if (request[i] > need[pid][i])
            return 0;
    }
    // Check if request is within available
    for (int i = 0; i < MAX_RESOURCES; i++) {
        if (request[i] > available[i])
            return 0;
    }
    // Simulate allocation of resources
    for (int i = 0; i < MAX_RESOURCES; i++) {
        available[i] -= request[i];
        allocation[pid][i] += request[i];
        need[pid][i] -= request[i];
    }
    // Check if the system is still in a safe state
    if (is_safe())
        return 1;
    else {
        // If granting the request leads to an unsafe state, rollback the allocation
        for (int i = 0; i < MAX_RESOURCES; i++) {
            available[i] += request[i];
            allocation[pid][i] -= request[i];
            need[pid][i] += request[i];
        }
        return 0;
    }
}

void release_resources(int pid, int release[]) {
    for (int i = 0; i < MAX_RESOURCES; i++) {
        available[i] += release[i];
        allocation[pid][i] -= release[i];
        need[pid][i] += release[i];
    }
}

int main() {
    int request[MAX_RESOURCES], release[MAX_RESOURCES];
    int pid, choice;

    // Initialize available resources
    printf("Enter the number of available resources:\n");
    for (int i = 0; i < MAX_RESOURCES; i++) {
        scanf("%d", &available[i]);
    }

    // Initialize maximum resources required by each process
    printf("Enter the maximum resources required by each process:\n");
    for (int i = 0; i < MAX_PROCESSES; i++) {
        printf("For Process %d:\n", i);
        for (int j = 0; j < MAX_RESOURCES; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    initialize();

    while (1) {
        printf("\n1. Request resources\n");
        printf("2. Release resources\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the process ID and the request for each resource:\n");
                scanf("%d", &pid);
                for (int i = 0; i < MAX_RESOURCES; i++) {
                    scanf("%d", &request[i]);
                }
                if (request_resources(pid, request))
                    printf("Request granted.\n");
                else
                    printf("Request denied. Process must wait.\n");
                break;
            case 2:
                printf("Enter the process ID and the resources to release:\n");
                scanf("%d", &pid);
                for (int i = 0; i < MAX_RESOURCES; i++) {
                    scanf("%d", &release[i]);
                }
                release_resources(pid, release);
                printf("Resources released.\n");
                break;
            case 3:
                return 0;
            default:
                printf

