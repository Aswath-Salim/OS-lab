#include <stdio.h>

int hasspace1(int m, int f[m])
{
	int i;
	for(i=0; i<m; i++)
	{
		if(f[i] == -1)
			return 1;
	}
	return 0;
}

int available1(int m, int f[m], int x)
{
	int i;
	for(i=0; i<m; i++)
		if(f[i] == x)
			return 1;
	return 0;
}

void printF1(int m, int f[m])
{
	int i;
	for(i=0; i<m; i++)
		printf("\t%d",f[i]);
}

int iterate1(int n, int s[n], int m, int f[m])
{
    printf("\n\n\t\tPage\t     Frames\n\t\t---------------------------\n\n");
	int i, k = -1, pf = 0;
	for(i=0; i<n; i++)
	{
		printf("\t");
		if(available1(m,f,s[i]) != 1)
		{
			pf++;
			k++;
			if(k >= m)
				k = 0;
			f[k] = s[i];

			if(hasspace1(m,f) != 1)
			{
				printf("!--");
			}
		}
		printf("\t[%d]",s[i]);
		printF1(m,f);
		printf("\n");
		if((i+1)%4 == 0 )
			printf("\n\n");
	}
	return pf;		
}

void setdefault1(int m, int f[m])
{
	int i;
	for(i=0; i<m; i++)
		f[i] = -1;
}

void setdefault2(int m, int f[m][3])
{
    int i;
    for(i=0; i<m; i++)
    {
        f[i][0] = -1;
        f[i][1] = -1;
        f[i][2] = -1;
    }
}

int updatefreq2(int s, int n, int freq[n][2])
{
    int i, flag = 0;
    for(i=0; i<n; i++)
    {
        if(freq[i][0] == s)
        {
            freq[i][1]++;
            flag = 1;
            return freq[i][1];
        }
    }
    if(flag == 0)
    {
        for(i=0; i<n; i++)
        {
            if(freq[i][0] == -1)
                break;
        }
        freq[i][0] = s;
        freq[i][1]++;
    }
    return freq[i][1];
}

int available2(int s, int m, int f[m][3])
{
    int i; 
    for(i=0; i<m; i++)
    {
        if(f[i][0] == s)
            return i;       // if element s is found in frame, return index
    }
    return -1;
}

void printF2(int s,int m, int f[m][3])
{
	int i;
    printf("\t[%d]",s);
	for(i=0; i<m; i++)
	{
        if(i != 0)
            printf("\t");
        if(f[i][0] != -1)
    		printf("\t\t%d\t\t%d\t\t%d\n",f[i][0],f[i][1],f[i][2]);
	}
}

int hasSpace2(int m, int f[m][3])
{
    int i; 
    for(i=0; i<m; i++)
    {
        if(f[i][0] == -1)
            return i;
    }
    return -1;
}

int checkFreq2(int m, int f[m][3])
{
    int i, min, flag = 0, index, count = 0; 
    for(i=0; i<m; i++)
    {
        if(i == 0)
        {
            min = f[i][2];
            index = i;
        }
        else
        {
            if(f[i][2] != min)
            {
                flag = 1;
                if(f[i][2] < min)
                {
                    min = f[i][2];
                    index = i;
                }
            }
        }
    }

    for(i=0; i<m; i++)
    {
        if(f[i][2] == min)
            count++;
    }

    if(flag == 0)
        return -1;
    if(flag == 1 && count == 1)
        return index;

    int maxtc;
    if(count > 1 && count < m)
    {
        for(i=0; i<m; i++)
        {
            if(f[i][2] == min)
            {
                if(i == 0)
                {
                    maxtc = f[i][1];
                    index = i;
                }
                else if(f[i][1] > maxtc)
                {
                    maxtc = f[i][1];
                    index = i;
                }
            }
        }
    }
    return index;
}

int LRU2(int m, int f[m][3])
{
    int i, max, index; 
    for(i=0; i<m; i++)
    {
        if(i == 0)
        {
            max = f[i][1];
            index = i;
        }
        else if(f[i][1] > max)
        {
            max = f[i][1];
            index = i;
        }
    }
    return index;
}

void line2()
{
    int i;
    printf("\n\t");
    for(i=0; i<52; i++)
    {
        printf("_");
    }
    printf("\n\n");
}

void timecounter2(int k, int m, int f[m][3], int flag)
{
    int i;
	for(i=0; i<m; i++)
	{
        if(flag == 1 && f[i][0] != -1)
            f[i][1]++;
        else if(flag == 0 && f[i][0] != -1)
        {
            if(i == k)
                f[i][1] = 0;
            else
                f[i][1]++;
        }
	}    
}

int iterate2(int n, int s[n], int freq[n][2], int m, int f[m][3])
{
    int i, newfreq, index, pf = 0;
    printf("\n\tElement\t      Frames\t   Timecounter\t   Frequency\n\n");
    for(i=0; i<n; i++)
    {
        newfreq = updatefreq2(s[i],n,freq);
        
        if(available2(s[i],m,f) == -1)
        {
            pf++;
            printf("!--");
            if(hasSpace2(m,f) != -1)
            {
                index = hasSpace2(m,f);
            }
            else
            {
                if(checkFreq2(m,f) == -1)
                {
                    index = LRU2(m,f);
                }
                else
                {
                    index = checkFreq2(m,f);
                }
            }
            f[index][0] = s[i];
            timecounter2(index,m,f,0);
        }
        else
        {
            index = available2(s[i],m,f);
            timecounter2(index,m,f,1);
        }  
        f[index][2] = newfreq;
        printF2(s[i],m,f); 
        line2();     
    }
    return pf;
}

int hasspace(int m, int f[m][2])
{
	int i;
	for(i=0; i<m; i++)
	{
		if(f[i][0] == -1)
			return 1;
	}
	return 0;
}

int available(int m, int f[m][2], int x)
{
	int i;
	for(i=0; i<m; i++)
		if(f[i][0] == x)
			return i;
	return -1;
}

void printF(int m, int f[m][2])
{
	int i;
	for(i=0; i<m; i++)
	{
		printf("\t%d (%d)",f[i][0],f[i][1]);
	}
}

void timecounter(int k, int m, int f[m][2])
{
    int i;
	for(i=0; i<m; i++)
	{
	    if(i == k)
	        f[i][1] = 0;
	    else if(f[i][0] != -1)
	        f[i][1] = f[i][1] +1;
	}    
}

int LRU(int m, int f[m][2])
{
    int i, max, index; 
    for(i=0; i<m; i++)
    {
        if(i == 0)
        {
            max = f[i][1];
            index = i;
        }
        else if(f[i][1] > max)
        {
            max = f[i][1];
            index = i;
        }
    }
    return index;
}

int iterate(int n, int s[n], int m, int f[m][2])
{
    printf("\n\n\t\tPage\t Frame (Time-counter)\n\t\t--------------------------------\n\n");
	int i, k = -1, pf = 0, index = -1;
	for(i=0; i<n; i++)
	{
		printf("\t");
		if( available(m,f,s[i]) == -1 )
		{
			if(hasspace(m,f) == 1)
			{
				k++;
				f[k][0] = s[i];
				pf++;
				timecounter(k,m,f);
			}
			else
			{
				pf++;
				index = LRU(m,f);
				f[index][0] = s[i];
				timecounter(index,m,f);
				
				printf("!--");
			}
		}
		else
		{
            timecounter( available(m,f,s[i]), m,f);
		}

		printf("\t[%d]",s[i]);
		printF(m,f);
		printf("\n");
		if((i+1)%4 == 0 )
			printf("\n\n");
	}
	return pf;		
}

void setdefault(int m, int f[m][2])
{
	int i;
	for(i=0; i<m; i++)
	{
		f[i][0] = -1;
		f[i][1] = -1;
	}
}

int main()
{  
    int x;
    int i;
    	int f1[m];
     int  freq[n][2], f[m][3];
     int  n, m=3, pf;
    int s[n];
    printf("**************\n");
    printf("ENTER \n 1.FIFO\n 2.LFU \n 3.LRU");
    scanf("%d",&x);
    switch(x)
    {
    case 1:
    

	printf("\n\t\t\tFIFO\n");
	printf("\n Enter the length of the reference string: ");
	scanf("%d",&n);
	

	printf("\n Enter the reference string: "); 
	//7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
	for(i=0; i<n; i++)
	{
		scanf("%d",&s[i]);
		if(s[i] < 0)
		{
			printf("\n Reference string cannot have negative entries.\n");
			return;
		}
	}
	printf("\n Enter the no. of frames: ");
	scanf("%d",&m);

	setdefault1(m,f1);
	int pf = iterate1(n,s,m,f1);
	printf("\n\tThe Total number of page faults: %d\n\n",pf);
    break;
    
    case 2:
   
    printf("\n\n\t\t\tLeast Frequently Used\n\n");
    printf("\n Enter the total number of page requests: ");
    scanf("%d",&n);

   
    printf("\n Enter the %d page requests: ",n);
    //7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
    for(i=0; i<n; i++)
    {
        scanf("%d",&s[i]);
        freq[i][0] = -1;
        freq[i][1] = 0;
        if(s[i] < 0)
        {
            printf("\n\t!-- Page requests cannot be negative --!");
            return;
        }
    }
	printf("\n Enter the no. of frames: ");
	scanf("%d",&m);
    setdefault2(m,f);
    pf = iterate2(n,s,freq,m,f);
    printf("\n\n\tThe total number of page faults: %d\n\n",pf);
    break;
    
    case 3:
    
	printf("\n\t\t\tLRU\n");
	printf("\n Enter the length of the reference string: ");
	scanf("%d",&n);
	
	printf("\n Enter the reference string: "); 
	//7 0 1 2 0 3 0 4 2 3 0 3 2 1 2 0 1 7 0 1
	for(i=0; i<n; i++)
	{
		scanf("%d",&s[i]);
		if(s[i] < 0)
		{
			printf("\n Reference string cannot have negative entries.\n");
			return;
		}
	}
	printf("\n Enter the no. of frames: ");
	scanf("%d",&m);
	printf("\n");
	int f[m][2];
	setdefault(m,f);
	int pf = iterate(n,s,m,f);
	printf("\n\tThe Total number of page faults: %d\n\n",pf);
    break;
        
    }
    return 0;
}
