#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 3 

void FIFO(int pages[], int n);
void LRU(int pages[], int n);
void LFU(int pages[], int n);

int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2}; 
    int n = sizeof(pages) / sizeof(pages[0]); 
    int choice;

    printf("Page reference string: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n");

    printf("Choose a page replacement algorithm:\n");
    printf("1. FIFO (First In, First Out)\n");
    printf("2. LRU (Least Recently Used)\n");
    printf("3. LFU (Least Frequently Used)\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            printf("FIFO Page Replacement:\n");
            FIFO(pages, n);
            break;
        case 2:
            printf("LRU Page Replacement:\n");
            LRU(pages, n);
            break;
        case 3:
            printf("LFU Page Replacement:\n");
            LFU(pages, n);
            break;
        default:
            printf("Invalid choice.\n");
    }

    return 0;
}

void FIFO(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1,-1,-1}; 
    int page_faults = 0;         
    int replace_index = 0;      

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            frames[replace_index] = page;
            replace_index = (replace_index + 1) % MAX_FRAMES;
            page_faults++;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}


void LRU(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1,-1,-1}; 
    int page_faults = 0;         
    int time_counter = 0;         
    int time_used[MAX_FRAMES] = {0}; 

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                time_used[j] = time_counter++;
                break;
            }
        }

        if (!found) {
            int replace_index = 0;
            int min_time_used = time_used[0];

            for (int j = 1; j < MAX_FRAMES; j++) {
                if (time_used[j] < min_time_used) {
                    min_time_used = time_used[j];
                    replace_index = j;
                }
            }

            frames[replace_index] = page;
            time_used[replace_index] = time_counter++;
            page_faults++;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}


void LFU(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1,-1,-1}; 
    int page_faults = 0;          
    int usage_count[MAX_FRAMES] = {0}; 

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                usage_count[j]++;
                break;
            }
        }

        if (!found) {
            int replace_index = 0;
            int min_usage_count = usage_count[0];

            for (int j = 1; j < MAX_FRAMES; j++) {
                if (usage_count[j] < min_usage_count) {
                    min_usage_count = usage_count[j];
                    replace_index = j;
                }
            }

            frames[replace_index] = page;
            usage_count[replace_index] = 1;
            page_faults++;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}
