#include <stdio.h>
#include <stdlib.h>

#define MAX_FRAMES 3
#define MAX_PAGES 10

void FIFO(int pages[], int n);
void LRU(int pages[], int n);
void Optimal(int pages[], int n);

int main() {
    int pages[MAX_PAGES] = {1, 2, 3, 4, 1, 5, 6, 7, 8, 1}; 
    int n = sizeof(pages) / sizeof(pages[0]);

    printf("Reference String: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n\n");

    printf("FIFO Page Replacement:\n");
    FIFO(pages, n);
    printf("\n");

    printf("LRU Page Replacement:\n");
    LRU(pages, n);
    printf("\n");

    printf("Optimal Page Replacement:\n");
    Optimal(pages, n);

    return 0;
}

void FIFO(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1};
    int page_faults = 0;
    int frame_index = 0;

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            page_faults++;
            frames[frame_index] = page;
            frame_index = (frame_index + 1) % MAX_FRAMES;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}

void LRU(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1};
    int page_faults = 0;

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

        // Check if page is already in frames
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                // Move the page to the front
                for (int k = j; k > 0; k--) {
                    frames[k] = frames[k - 1];
                }
                frames[0] = page;
                break;
            }
        }

     
        if (!found) {
            page_faults++;
            for (int j = MAX_FRAMES - 1; j > 0; j--) {
                frames[j] = frames[j - 1];
            }
            frames[0] = page;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}


void Optimal(int pages[], int n) {
    int frames[MAX_FRAMES] = {-1};
    int page_faults = 0;

    for (int i = 0; i < n; i++) {
        int page = pages[i];
        int found = 0;

       
        for (int j = 0; j < MAX_FRAMES; j++) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            page_faults++;
            int replace_index = -1;
            int farthest = i;
            for (int j = 0; j < MAX_FRAMES; j++) {
                int k;
                for (k = i + 1; k < n; k++) {
                    if (frames[j] == pages[k]) {
                        if (k > farthest) {
                            farthest = k;
                            replace_index = j;
                        }
                        break;
                    }
                }
                if (k == n) {
                    replace_index = j;
                    break;
                }
            }
            frames[replace_index] = page;
        }

        printf("Page %d: ", page);
        for (int j = 0; j < MAX_FRAMES; j++) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", page_faults);
}
